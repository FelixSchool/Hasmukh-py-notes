Opening Files in Python:
Python has a built-in open() function to open a file. This function returns a file object, also called a handle, as it is used to read or modify the file accordingly.
>>> f = open("test.txt")    # open file in current directory
>>> f = open("C:/Python38/README.txt")  # specifying full path

We can specify the mode while opening a file. In mode, we specify whether we want to read r, write w or append a to the file. 
We can also specify if we want to open the file in text mode or binary mode.
Mode	Description
r	Opens a file for reading. (default)
w	Opens a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
x	Opens a file for exclusive creation. If the file already exists, the operation fails.
a	Opens a file for appending at the end of the file without truncating it. Creates a new file if it does not exist.
t	Opens in text mode. (default)
b	Opens in binary mode.
+	Opens a file for updating (reading and writing)
f = open("test.txt", mode='r', encoding='utf-8')

Closing Files in Python:
f.close()
A safer way is to use a try...finally block.
try:
   f = open("test.txt", encoding = 'utf-8')
   # perform file operations
finally:
   f.close()
   
 Writing to Files in Python:
 write()
 
 Reading Files in Python:
 read(size)
 
 >>> f.tell()    # get the current file position
 >>> f.seek(0)   # bring file cursor to initial position

we can use the readline() method to read individual lines of a file. This method reads a file till the newline, including the newline character.
Lastly, the readlines() method returns a list of remaining lines of the entire file. All these reading methods return empty values when the end of file (EOF) is reached.

 
